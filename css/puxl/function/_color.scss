@charset 'UTF-8';

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//    Puxl
//
//    Version:     1-beta
//
//    Author:      Iñigo Garcia (@MrKanuel)
//
//    Route:       puxl-framework/css/puxl/function/_color.scss
//
//    Requires:    puxl-framework/css/puxl/function/_math.scss
//                 puxl-framework/css/puxl/theme/_puxl-light.scss
//
//    License:     The MIT License (MIT)
//                 https://github.com/puxl/puxl-framework/blob/master/LICENSE
//
//    This functions use Open Source components. You can find the source code 
//    of their open source projects along with license information below.
//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  //	W3C  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  $compliances:(
    A:      3,
    AA:     4.5,
    AAA:    7
  );


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//    SASS Color Helpers - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//    Resources:     https://github.com/voxpelli/sass-color-helpers
//
//    Author:        Pelle Wessman
//
//    Author URL:    http://kodfabrik.se/
//
//    Copyright:     Copyright © 2018 Pelle Wessman <pelle@kodfabrik.se>
//
//    License:       The MIT License (MIT)
//                   https://voxpelli.mit-license.org/

  @function ch-color-luminance($color) {
  //  Return color luminance according to W3C specification.
  //
  //  Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  //  Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  //
  //  Parameters:    $color: [ any color value ]

    $rgba: red($color), green($color), blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
      $rgb: nth($rgba, $i);
      $rgb: $rgb / 255;

      $rgb: if($rgb < .03928, $rgb / 12.92, ch-pow(($rgb + .055) / 1.055, 2.4, 16));

      $rgba2: append($rgba2, $rgb);
    }

    @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
  }


  @function ch-color-contrast($color1, $color2) {
  //  Return contrast ratio between two colors according to W3C specification.
  //
  //  Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  //  Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  //
  //  Parameters:    $color1: [ any color value ]
  //                 $color2: [ any color value ]

    $luminance1: ch-color-luminance($color1) + .05;
    $luminance2: ch-color-luminance($color2) + .05;
    $ratio: $luminance1 / $luminance2;

    @if $luminance2 > $luminance1 {
      $ratio: 1 / $ratio;
    }

    $ratio: round($ratio * 10) / 10;

    @return $ratio;
  }


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//    Puxl color functions - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//    Color to RGB - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function color-to-rgb($color) {
  //  Return RGB value of a color.
  //
  //  Parameters:    $color: [ any color value ]
  //                 Returns three comma separated numbers corresponding to
  //                 each of the red, green, and blue channel values of the
  //                 color passed as $color.

    @return round(red($color)) + ',' + round(green($color)) + ',' + round(blue($color));
  }


//    Get color  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function get-color($color-name, $tone: base) {
  //  Return the color tone of a color.
  //
  //  Parameters:    $color-name: [ primary, secondary, success, info, warning
  //                              or danger ]
  //                              Choose one color from $colors in
  //                              theme/_puxl-light.scss
  //
  //                 $tone (optional): [ lightest, lighter, base, darker
  //                                   or darkest ]
  //                                   Default: [ base ]

    @if map-has-key($colors, $color-name) {
      @if $tone == 'lightest' {
        @return lighten(map-get($colors, $color-name), 20%);
      }

      @if $tone == 'lighter' {
        @return lighten(map-get($colors, $color-name), 10%);
      }

      @if $tone == 'base' {
        @return map-get($colors, $color-name);
      }

      @if $tone == 'darker' {
        @return darken(map-get($colors, $color-name), 10%);
      }

      @if $tone == 'darkest' {
        @return darken(map-get($colors, $color-name), 20%);
      }
    }

    @warn 'The key #{$color-name} is not in the map "$colors"';

    @return null;
  }


//    Contrast compliance  - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-compliance($color-foreground, $color-background, $compliance: null) {
  //  Return true or false if contrast between two colors matches contrast
  //  compliance level A, AA, or AAA.
  //
  //  Parameters:    $color-foreground: [ any color value ]
  //
  //                 $color-background: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    $contrast: ch-color-contrast($color-foreground, $color-background);

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if ($contrast >= $compliance) {
      @return true;
    }
    @else {
      @return false;
    }
  }


//    Contrast color black - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-color-black($color, $compliance: null) {
  //  Return black if contrast between two colors matches contrast
  //  compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if (contrast-compliance(black, $color, $compliance)) {
      @return black;
    }
  }


//    Contrast color white - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-color-white($color, $compliance: null) {
  //  Return white if contrast between two colors matches contrast
  //  compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if (contrast-compliance(white, $color, $compliance)) {
      @return white;
    }
  }


//    Contrast color black-white - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-color-black-white($color, $compliance: null) {
  //  Return white or black if contrast between two colors matches contrast
  //  compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if (contrast-compliance(white, $color, $compliance)) {
      @return white;
    }
    @else if (contrast-compliance(black, $color, $compliance)) {
      @return black;
    }
  }


//    Contrast shade dark  - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-shade-dark($color, $compliance: null) {
  //  Return a darker shade of a color if contrast between white and $color
  //  matches contrast compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (contrast-compliance(white, $color, $compliance) == false) {
      $new-color: $color;
      $contrast-color-new-color: ch-color-contrast($color, $new-color);

      @while ($contrast-color-new-color <= $compliance) {
        $darker-color: darken($new-color, 1%);
        $darker-contrast: ch-color-contrast($color, $darker-color);

        $new-color: $darker-color;
        $contrast-color-new-color: $darker-contrast;
      }

      @return $new-color;
    }
    @else {
      @return currentColor;
    }
  }


//    Contrast shade light - - - - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-shade-light($color, $compliance: null) {
  //  Return a lighter shade of a color if contrast between white and $color
  //  matches contrast compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (contrast-compliance(white, $color, $compliance)) {
      $new-color: $color;
      $contrast-color-new-color: ch-color-contrast($color, $new-color);

      @while ($contrast-color-new-color <= $compliance) {
        $lighter-color: lighten($new-color, 1%);
        $lighter-contrast: ch-color-contrast($color, $lighter-color);

        $new-color: $lighter-color;
        $contrast-color-new-color: $lighter-contrast;
      }

      @return $new-color;
    }
    @else {
      @return currentColor;
    }
  }


//    Contrast shade dark-light  - - - - - - - - - - - - - - - - - - - - - - - -

  @function contrast-shade-dark-light($color, $compliance: null) {
  //  Return the lighter or the darker shade of a color until contrast between
  //  white and $color match contrast compliance level.
  //
  //  Parameters:    $color: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (contrast-compliance(white, $color, $compliance)) {
      $new-color: $color;
      $contrast-color-new-color: ch-color-contrast($color, $new-color);

      @while ($contrast-color-new-color <= $compliance) {
        $lighter-color: lighten($new-color, 1%);
        $lighter-contrast: ch-color-contrast($color, $lighter-color);

        $new-color: $lighter-color;
        $contrast-color-new-color: $lighter-contrast;
      }

      @return $new-color;
    }
    @else {
      $new-color: $color;
      $contrast-color-new-color: ch-color-contrast($color, $new-color);

      @while ($contrast-color-new-color <= $compliance) {
        $darker-color: darken($new-color, 1%);
        $darker-contrast: ch-color-contrast($color, $darker-color);

        $new-color: $darker-color;
        $contrast-color-new-color: $darker-contrast;
      }

      @return $new-color;
    }
  }


//    Colors shade contrast dark - - - - - - - - - - - - - - - - - - - - - - - -

  @function colors-shade-contrast-dark($color-foreground, $color-background: white, $compliance: null) {
  //  Return the darker shade of $color-foreground until it matches contrast
  //  compliance level A, AA, or AAA against $color-background.
  //
  //  Parameters:    $color-foreground: [ any color value ]
  //
  //                 $color-background (optional): [ any color value ]
  //                                               Default: [ white ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (ch-color-contrast($color-foreground, $color-background) < $compliance) {
      $new-color: $color-foreground;
      $contrast-color-new-color: ch-color-contrast($new-color, $color-background);

      @while ($contrast-color-new-color <= $compliance) {
        $darker-color: darken($new-color, 1%);
        $darker-contrast: ch-color-contrast($darker-color, $color-background);

        $new-color: $darker-color;
        $contrast-color-new-color: $darker-contrast;
      }

      @return $new-color;
    }
    @else {
      @return $color-foreground;
    }
  }


//    Colors shade contrast light  - - - - - - - - - - - - - - - - - - - - - - -

  @function colors-shade-contrast-light($color-foreground, $color-background: black, $compliance: null) {
  //  Return the lighter shade of $color-foreground until it matches contrast
  //  compliance level A, AA, or AAA against $color-background.
  //
  //  Parameters:    $color-foreground: [ any color value ]
  //
  //                 $color-background (optional): [ any color value ]
  //                                               Default: [ black ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (ch-color-contrast($color-foreground, $color-background) < $compliance) {
      $new-color: $color-foreground;
      $contrast-color-new-color: ch-color-contrast($new-color, $color-background);

      @while ($contrast-color-new-color <= $compliance) {
        $lighter-color: lighten($new-color, 1%);
        $lighter-contrast: ch-color-contrast($lighter-color, $color-background);

        $new-color: $lighter-color;
        $contrast-color-new-color: $lighter-contrast;
      }

      @return $new-color;
    }
    @else {
      @return $color-foreground;
    }
  }


//    Colors shade contrast dark-light - - - - - - - - - - - - - - - - - - - - -

  @function colors-shade-contrast-dark-light($color-foreground, $color-background, $compliance: null) {
  //  Return the lighter or the darker shade of $color-foreground until it matches contrast
  //  matches contrast compliance level A, AA, or AAA against $color-background.
  //
  //  Parameters:    $color-foreground: [ any color value ]
  //
  //                 $color-background: [ any color value ]
  //
  //                 $compliance (optional): [ A, AA, or AAA ]
  //                                         Default: [ null ]

    @if ($compliance == null) {
      $compliance:    map-get($compliances, AA);
    }
    @else {
      @if ($compliance == A) {
        $compliance:    map-get($compliances, A);
      }
      @if ($compliance == AA) {
        $compliance:    map-get($compliances, AA);
      }
      @if ($compliance == AAA) {
        $compliance:    map-get($compliances, AAA);
      }
    }

    @if (ch-color-contrast($color-foreground, $color-background) < $compliance) {
      @if (contrast-compliance(white, $color-foreground, $compliance)) {
        @return colors-shade-contrast-light($color-foreground, $color-background);
      }
      @else {
        @return colors-shade-contrast-dark($color-foreground, $color-background);
      }
    }
    @else {
      @return $color-foreground;
    }
  }
